import logging
import re
from typing import Union

import discord

import time
from datetime import datetime, timedelta

from discord.ext import tasks
from discord.ext.commands import Greedy
from redbot.core import commands, Config, checks
from redbot.core.utils.chat_formatting import box
from discord.utils import get as discord_get
from tabulate import tabulate

logger = logging.getLogger("red.RedX.Jailbreak")


class JailbreakError(Exception):
    pass

class JailRoleError(JailbreakError):
    pass
    

class Jailbreak(commands.Cog):
    """Syst√®me de prison"""

    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.config = Config.get_conf(self, identifier=736144321857978388, force_registration=True)
        
        default_guild = {
            'Jail': {},
            'Settings': {
                'role': None,
                'default_time': 600,
                'exclude_channels': []
            }
        }
        self.config.register_guild(**default_guild)
        
        self.cache = {}
        
        self.jailbreak_checks.start()
        
        
# CHECKS______________________________________________________

    @tasks.loop(seconds=30.0)
    async def jailbreak_checks(self):
        all_guilds = await self.config.all_guilds()
        for g in all_guilds:
            jail = await self.config.guild_from_id(g).Jail()
            if jail:
                guild = self.bot.get_guild(g)
                for u in jail:
                    try:
                        user = guild.get_member(int(u))
                    except:
                        await self.jail_clear_userid(u)
                    else:
                        await self.jail_check_user(user)
                

    @jailbreak_checks.before_loop
    async def before_jailbreak_checks(self):
        logger.info('Lancement de jailbreak_checks...')
        await self.bot.wait_until_ready()
        
        
# FONCTIONS___________________________________________________

    async def jail_manage_user(self, ctx: commands.Context, user: discord.Member, seconds: int, *, reason: str = ''):
        guild = user.guild
        author, channel = ctx.author, ctx.channel
        check, cross = self.bot.get_emoji(812451214037221439), self.bot.get_emoji(812451214179434551)
        
        settings = await self.config.guild(guild).Settings()
        role = guild.get_role(settings['role'])
        if not role:
            raise ValueError("Le r√¥le prisonnier n'a pas √©t√© configur√©")
        
        try:
            await user.add_roles(role, reason=f"Par {author} | {'¬´ ' + reason + ' ¬ª' if reason else 'Raison inconnue'}") 
        except:
            return await channel.send(f"{cross}üîí **Prison** ¬∑ Impossible d'ajouter **{user}** √† la prison")
        else:
            await self.config.guild(guild).Jail.set_raw(user.id, value={'time': seconds, 'channel': channel.id})
        
        dtime = datetime.now().fromtimestamp(seconds)
        if seconds > time.time():
            if dtime.day != datetime.now().day:
                msg = f"{check}üîí **Prison** ¬∑ Sortie de {user.mention} pr√©vue le **{dtime.strftime('%d/%m/%Y √† %H:%M')}**"
            else:
                msg = f"{check}üîí **Prison** ¬∑ Sortie de {user.mention} pr√©vue √† **{dtime.strftime('%H:%M')}**"
            if reason:
                msg += f"\n__Raison :__ `{reason}`"
        else:
            return await self.jail_check_user(user)
        
        return await ctx.reply(msg, mention_author=False)
    
    async def jail_check_user(self, user: discord.Member):
        guild = user.guild
        check, cross = self.bot.get_emoji(812451214037221439), self.bot.get_emoji(812451214179434551)
        
        settings = await self.config.guild(guild).Settings()
        role = guild.get_role(settings['role'])
        if not role:
            raise ValueError("Le r√¥le prisonnier n'a pas √©t√© configur√©")
        
        try:
            data = await self.config.guild(guild).Jail.get_raw(str(user.id))
        except KeyError:
            return
        
        seconds, channelid = data.values()
        if seconds <= int(time.time()):
            channel = guild.get_channel(channelid)
            await self.config.guild(guild).Jail.clear_raw(str(user.id))
            try:
                await user.remove_roles(role, reason="Fin de peine")
            except:
                await self.jail_clear_userid(guild, str(user.id))
                return await channel.send(f"{cross}üîì **Sortie de prison** ¬∑ **{user}** a √©t√© sorti de force")
            
            msg = f"{check}üîì **Sortie de prison** ¬∑ Fin de peine de **{user}**"
            return await channel.send(msg)
        elif role not in user.roles:
            try:
                await self.config.guild(guild).Jail.clear_raw(str(user.id))
            except:
                pass
            channel = guild.get_channel(channelid)
            return await channel.send(f"{check}üîì **Sortie de prison** ¬∑ **{user}** a √©t√© sorti manuellement [D√©tection auto.]")
        
    async def jail_clear_userid(self, guild: discord.Guild, user_id: str):
        cross = self.bot.get_emoji(812451214179434551)
        try:
            channelid = await self.config.guild(guild).Jail.get_raw(user_id, 'channel')
            await self.config.guild(guild).Jail.clear_raw(user_id)
        except KeyError:
            return
        else:
            user = self.bot.get_user(int(user_id))
            if user:
                msg = f"{cross}üîì **Sortie de prison** ¬∑ **{user}** n'a pu √™tre sorti proprement\n*La raison la plus probable est que ce membre a quitt√© le serveur avant la fin de sa peine*"
            else:
                msg = f"{cross}üîì **Sortie de prison** ¬∑ **ID:{user_id}** n'a pu √™tre sorti proprement\n*La raison la plus probable est que ce membre a quitt√© le serveur avant la fin de sa peine*"
        channel = guild.get_channel(channelid)
        return await channel.send(msg)
    
    
    def parse_timedelta(self, text: str) -> timedelta:
        result = re.compile(r'([+-])?(?:(\d+)([smhj]?))', re.DOTALL | re.IGNORECASE).findall(text)
        if not result:
            raise ValueError("Le texte ne contient aucune indication de temps")
        
        fmtmap = {'s': 'seconds', 'm': 'minutes', 'h': 'hours', 'j': 'days'}
        args = {}
        for oper, value, fmt in result:
            fmtname = fmtmap.get(fmt, 'minutes')
            value = -int(value) if oper == '-' else int(value)
            args[fmtname] = args.get(fmtname, 0) + value
        
        return timedelta(**args)
        
# COMMANDES____________________________________________________
     
    @commands.command(name='prison', aliases=['p'])
    @checks.admin_or_permissions(manage_messages=True)
    async def jail_users(self, ctx, users: Greedy[discord.Member], duration: str = '', *, reason: str = ''):
        """Ajouter, retirer ou √©diter une peine de prison d'un membre
        
        __**Format du temps de peine**__
        `+X` = Ajouter du temps
        `-X` = Retirer du temps
        `s/m/h/j` = **S**econdes, **M**inutes, **H**eures, **J**ours
        
        Exemples : `30m` | `+6h30m` | `-2h30`
        
        Il est possible d'ajouter une raison apr√®s le temps
        En l'absence de pr√©cision d'un format de temps, des minutes sont utilis√©es"""
        guild = ctx.guild
        cross = self.bot.get_emoji(812451214179434551)
        settings = await self.config.guild(guild).Settings()
        
        if not duration:
            time = f"{settings['default_time']}s"
        else:
            time = duration.lower()
        try:
            tdelta = self.parse_timedelta(time)
        except ValueError:
            return await ctx.reply(f"{cross} **Erreur** ¬∑ Format du temps invalide, consultez `;help p users`")
        
        role = guild.get_role(settings['role'])
        if not role:
            return await ctx.reply(f"{cross} **Erreur** ¬∑ Le r√¥le de prisonnier n'a pas √©t√© configur√©")
    
        jail = await self.config.guild(guild).Jail()
        for user in users:
            if str(user.id) in jail and duration == '':
                seconds = 0
            elif str(user.id) in jail:
                dtime = datetime.now().fromtimestamp(jail[str(user.id)]['time'])
                seconds = (dtime + tdelta).timestamp()
            else:
                seconds = (datetime.now() + tdelta).timestamp()
                
            await self.jail_manage_user(ctx, user, seconds, reason=reason)
        
    @commands.command(name='prisonlist', aliases=['plist'])
    async def jail_list_users(self, ctx):
        """Affiche une liste des membres actuellement emprisonn√©s"""
        guild = ctx.guild
        em = discord.Embed(title="Membres emprisonn√©s", color=await ctx.embed_color())
        em.set_footer(text="G√©rez les peines avec la commande ';p'")
        
        jail = await self.config.guild(guild).Jail()
        if not jail:
            em.description = box("Prison vide")
        else:
            tabl = [(guild.get_member(int(u)), datetime.now().fromtimestamp(jail[int(u)]['time']).strftime('%d/%m/%Y %H:%M')) for u in jail if guild.get_member(int(u))]
            em.description = box(tabulate(tabl, headers=('Membre', 'Sortie')))
        return await ctx.reply(embed=em, mention_author=False)
    
    
# PARAMETRES_______________________________________________________

    @commands.group(name="jailset", aliases=['pset'])
    @checks.admin_or_permissions(manage_messages=True)
    async def jail_settings(self, ctx):
        """Param√®tres de la prison"""

    @jail_settings.command(name="role")
    async def jail_role(self, ctx, role: Union[discord.Role, bool] = None):
        """D√©finir le r√¥le de la prison

        Si aucun r√¥le n'est donn√©, celui-ci est cr√©√© automatiquement (si non d√©j√† pr√©sent)
        Mettre 'False' d√©sactive la prison"""
        guild = ctx.guild
        jail = await self.config.guild(guild).Settings()
        if type(role) == discord.Role:
            jail["role"] = role.id
            await ctx.send(f"**R√¥le modifi√©** ¬ª Le r√¥le {role.mention} sera d√©sormais utilis√© pour la prison\n"
                           f"Fa√Ætes `[p]pset check` pour r√©gler automatiquement les permissions. "
                           f"Sachez que vous devez manuellement monter le r√¥le √† sa place appropri√©e dans la hi√©rarchie.")
        elif role != False:
            maybe_role = discord_get(guild.roles, name="Prisonnier")
            if maybe_role:
                jail["role"] = maybe_role.id
                await ctx.send(
                    f"**R√¥le d√©tect√©** ¬ª Le r√¥le {maybe_role.mention} sera d√©sormais utilis√© pour la prison\n"
                    f"Sachez que vous devez manuellement monter le r√¥le √† sa place appropri√©e dans la hi√©rarchie.")
            else:
                role = await guild.create_role(name="Prisonnier", color=discord.Colour.default(),
                                               reason="Cr√©ation auto. du r√¥le de prisonnier")
                jail["role"] = role.id
                await ctx.send(f"**R√¥le cr√©√©** ¬ª Le r√¥le {role.mention} sera d√©sormais utilis√© pour la prison\n"
                               f"Sachez que vous devez manuellement monter le r√¥le √† sa place appropri√©e dans la hi√©rarchie.")
        else:
            jail['role'] = None
            await ctx.send(f"**R√¥le retir√©** ¬ª La prison a √©t√© d√©sactiv√©e.")
        await self.config.guild(guild).Settings.set(jail)
        
    @jail_settings.command(name="delay")
    async def jail_default_delay(self, ctx, val: int = 600):
        """R√®gle le d√©lai par d√©faut (en secondes) de la prison si aucune dur√©e n'est sp√©cifi√©e

        Doit √™tre sup√©rieur √† 30 et inf√©rieur √† 86400 (1 jour)
        Par d√©faut 600s (10 minutes)"""
        guild = ctx.guild
        jail = await self.config.guild(guild).Settings()
        if 30 <= val <= 86400:
            jail["default_time"] = val
            await ctx.send(
                f"**D√©lai modifi√©** ¬ª Par d√©faut les prisonniers seront emprisonn√©s {val} secondes")
            await self.config.guild(guild).jail_settings.set(jail)
        else:
            await ctx.send(
                f"**D√©lai invalide** ¬ª La valeur du d√©lai doit se situer entre 30 et 86400 secondes")
        
